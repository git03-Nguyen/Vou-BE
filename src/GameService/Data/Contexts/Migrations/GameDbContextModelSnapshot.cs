// <auto-generated />
using System;
using GameService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shared.Contracts;

#nullable disable

namespace GameService.Data.Contexts.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("game")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameService.Data.Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Games", "game");

                    b.HasData(
                        new
                        {
                            Id = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            Author = "TuanDat-ThienAn",
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2025, 1, 11, 11, 57, 15, 264, DateTimeKind.Local).AddTicks(2482),
                            Description = "This is shake game",
                            ImageUrl = "https://storageaccwct.blob.core.windows.net/wct-blobstorage/UserDefaultAvatar.png",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 1, 11, 11, 57, 15, 264, DateTimeKind.Local).AddTicks(2502),
                            Name = "Shake Game",
                            Type = 1
                        },
                        new
                        {
                            Id = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Author = "TuanDat-ThienAn",
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2025, 1, 11, 11, 57, 15, 264, DateTimeKind.Local).AddTicks(2510),
                            Description = "This is quiz game",
                            ImageUrl = "https://storageaccwct.blob.core.windows.net/wct-blobstorage/UserDefaultAvatar.png",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 1, 11, 11, 57, 15, 264, DateTimeKind.Local).AddTicks(2511),
                            Name = "Quiz Game",
                            Type = 0
                        });
                });

            modelBuilder.Entity("GameService.Data.Models.GameSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("BreakTime")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Question[]>("Questions")
                        .HasColumnType("jsonb");

                    b.Property<int?>("ShakeIntensity")
                        .HasColumnType("integer");

                    b.Property<int?>("SingleQuizTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalQuiz")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameSessions", "game");
                });

            modelBuilder.Entity("GameService.Data.Models.VoucherInGameSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GameSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Possibility")
                        .HasColumnType("integer");

                    b.Property<int?>("TopFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("TopTo")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("VoucherInGameSessions", "game");
                });

            modelBuilder.Entity("GameService.Data.Models.GameSession", b =>
                {
                    b.HasOne("GameService.Data.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameService.Data.Models.VoucherInGameSession", b =>
                {
                    b.HasOne("GameService.Data.Models.GameSession", null)
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
